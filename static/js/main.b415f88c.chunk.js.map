{"version":3,"sources":["logo.svg","components/card-componenets/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cardcomponents","props","className","alt","src","monstar","id","name","email","CardList","monstars","map","key","Searcbox","placeholder","handlechenge","type","onChange","App","onTextChenge","setState","state","searchbox","fetch","then","respons","json","user","this","filterMonstars","filter","monster","toLowerCase","includes","e","target","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0KAAAA,EAAOC,QAAU,IAA0B,kC,2LCG9BC,G,wBAAiB,SAAAC,GAAK,OACjC,yBAAKC,UAAU,kBACb,yBACEC,IAAI,WACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,2BAEL,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCNTC,EAAW,SAAAR,GACtB,OACE,yBAAKC,UAAU,aACZD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACzB,kBAAC,EAAD,CAAgBO,IAAKP,EAAQC,GAAID,QAASA,SCJrCQ,G,MAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACtB,6BACE,2BACEb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,OCgCDG,E,YAnCb,aAAe,IAAD,8BACZ,+CAcFC,aAAe,WACb,EAAKC,UAAS,iBAAO,CAAEb,KAAM,mBAb7B,EAAKc,MAAQ,CACXX,SAAU,GACVY,UAAW,IALD,E,iFASO,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAG,GAAI,OAAI,EAAKP,SAAS,CAAEV,SAAUiB,S,+BAMlC,IAAD,SACyBC,KAAKP,MAA7BX,EADD,EACCA,SAAUY,EADX,EACWA,UACZO,EAAiBnB,EAASoB,QAAO,SAAAC,GAAO,OAC5CA,EAAQxB,KAAKyB,cAAcC,SAASX,EAAUU,kBAEhD,OACE,yBAAK9B,UAAU,OACb,kDACA,kBAAC,EAAD,CACEY,YAAY,kBACZC,aAAc,SAAAmB,GAAC,OAAI,EAAKd,SAAS,CAAEE,UAAWY,EAAEC,OAAOC,WAEzD,kBAAC,EAAD,CAAU1B,SAAUmB,S,GA/BVQ,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.b415f88c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\";\r\nimport \"./Card.component.style.css\";\r\n\r\nexport const Cardcomponents = props => (\r\n  <div className=\"card-component\">\r\n    <img\r\n      alt=\"monsters\"\r\n      src={`https://robohash.org/${props.monstar.id}?set=set&size=180x180`}\r\n    />\r\n    <h2>{props.monstar.name}</h2>\r\n    <p>{props.monstar.email}</p>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport \"./Card-list.style.css\";\r\nimport { Cardcomponents } from \"../card-componenets/card.component\";\r\n\r\nexport const CardList = props => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.monstars.map(monstar => (\r\n        <Cardcomponents key={monstar.id} monstar={monstar} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./search-box.style.css\";\r\n\r\nexport const Searcbox = ({ placeholder, handlechenge }) => (\r\n  <div>\r\n    <input\r\n      className=\"search\"\r\n      type=\"search\"\r\n      placeholder={placeholder}\r\n      onChange={handlechenge}\r\n    />\r\n  </div>\r\n);\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { Searcbox } from \"./components/search-box/search-box.component\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monstars: [],\n      searchbox: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(respons => respons.json())\n      .then(user => this.setState({ monstars: user }));\n  }\n\n  onTextChenge = () => {\n    this.setState(() => ({ name: \"Hello Yihua\" }));\n  };\n  render() {\n    const { monstars, searchbox } = this.state;\n    const filterMonstars = monstars.filter(monster =>\n      monster.name.toLowerCase().includes(searchbox.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1> Monsters Rolodax </h1>\n        <Searcbox\n          placeholder=\"Search monsters\"\n          handlechenge={e => this.setState({ searchbox: e.target.value })}\n        />\n        <CardList monstars={filterMonstars} />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}